name: Deploy to AWS App Runner

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build, Push to ECR and update App Runner
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Extract backend ECR repository name and URI
        id: ecr-backend
        run: |
          echo "::set-output name=uri::${{ secrets.BACKEND_ECR_REPOSITORY_URI }}"
      - name: Extract frontend ECR repository name and URI
        id: ecr-frontend
        run: |
          echo "::set-output name=uri::${{ secrets.FRONTEND_ECR_REPOSITORY_URI }}"
      - name: Build backend Docker Image
        run: |
          docker buildx build --platform linux/amd64 \
            -t ${{ steps.ecr-backend.outputs.uri }}:latest . --load
      - name: Push backend image to ECR
        run: docker push ${{ steps.ecr-backend.outputs.uri }}:latest
      #   - name: Update App Runner Service (Backend)
      #     run: |
      #       UPDATE_RESPONSE=$(aws apprunner update-service \
      #         --service-arn ${{ secrets.APP_RUNNER_BACKEND_ARN }} \
      #         --source-configuration '{"ImageRepository": { "ImageIdentifier": "${{ secrets.BACKEND_ECR_REPOSITORY_URI }}:latest", "ImageRepositoryType": "ECR"}}')
      #       echo "$UPDATE_RESPONSE" | jq -r '.Service.ServiceUrl' >> $GITHUB_ENV
      - name: Build frontend Docker Image
        run: |
          docker buildx build --platform linux/amd64 --build-arg "VITE_BACKEND_URL=${{ secrets.BACKEND_SERVICE_BASE_URL }}" \
            -t ${{ steps.ecr-frontend.outputs.uri }}:latest . --load
      - name: Push frontend image to ECR
        run: docker push ${{ steps.ecr-frontend.outputs.uri }}:latest
    #   - name: Update App Runner Service (Frontend)
    #     run: |
    #       aws apprunner update-service \
    #         --service-arn ${{ secrets.APP_RUNNER_FRONTEND_ARN }} \
    #         --source-configuration '{"ImageRepository": { "ImageIdentifier": "${{ secrets.FRONTEND_ECR_REPOSITORY_URI }}:latest", "ImageRepositoryType": "ECR"}}'
